import{_ as a,c as e,o as n,a3 as s,j as i}from"./chunks/framework.ZJ0k6Sl1.js";const R=JSON.parse('{"title":"no-implicit-globals","description":"","frontmatter":{"title":"no-implicit-globals","rule_type":"suggestion","related_rules":["no-undef","no-global-assign","no-unused-vars"],"further_reading":["https://benalman.com/news/2010/11/immediately-invoked-function-expression/","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Undeclared_var","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone"]},"headers":[],"relativePath":"rules/eslint-recommended/no-implicit-globals.md","filePath":"rules/eslint-recommended/no-implicit-globals.md"}'),t={name:"rules/eslint-recommended/no-implicit-globals.md"},l=s('<p>It is the best practice to avoid &#39;polluting&#39; the global scope with variables that are intended to be local to the script.</p><p>Global variables created from a script can produce name collisions with global variables created from another script, which will usually lead to runtime errors or unexpected behavior.</p><p>This rule disallows the following:</p><ul><li>Declarations that create one or more variables in the global scope.</li><li>Global variable leaks.</li><li>Redeclarations of read-only global variables and assignments to read-only global variables.</li></ul><p>There is an explicit way to create a global variable when needed, by assigning to a property of the global object.</p><p>This rule is mostly useful for browser scripts. Top-level declarations in ES modules and CommonJS modules create module-scoped variables. ES modules also have implicit <code>strict</code> mode, which prevents global variable leaks.</p><p>By default, this rule does not check <code>const</code>, <code>let</code> and <code>class</code> declarations.</p><p>This rule has an object option with one option:</p><ul><li>Set <code>&quot;lexicalBindings&quot;</code> to <code>true</code> if you want this rule to check <code>const</code>, <code>let</code> and <code>class</code> declarations as well.</li></ul><h2 id="rule-details" tabindex="-1">Rule Details <a class="header-anchor" href="#rule-details" aria-label="Permalink to &quot;Rule Details&quot;">​</a></h2><h3 id="var-and-function-declarations" tabindex="-1"><code>var</code> and <code>function</code> declarations <a class="header-anchor" href="#var-and-function-declarations" aria-label="Permalink to &quot;`var` and `function` declarations&quot;">​</a></h3><p>When working with browser scripts, developers often forget that variable and function declarations at the top-level scope become global variables on the <code>window</code> object. As opposed to modules which have their own scope. Globals should be explicitly assigned to <code>window</code> or <code>self</code> if that is the intent. Otherwise variables intended to be local to the script should be wrapped in an IIFE.</p><p>This rule disallows <code>var</code> and <code>function</code> declarations at the top-level script scope. This does not apply to ES and CommonJS modules since they have a module scope.</p><p>Examples of <strong>incorrect</strong> code for this rule:</p>',14),o=i("p",{"sourceType:":"",script:""},"::: incorrect",-1),p=s(`<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*eslint no-implicit-globals: &quot;error&quot;*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span></code></pre></div><p>:::</p><p>Examples of <strong>correct</strong> code for this rule:</p>`,3),h=i("p",{"sourceType:":"",script:""},"::: correct",-1),r=s(`<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*eslint no-implicit-globals: &quot;error&quot;*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// explicitly set on window</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// intended to be scope to this file</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})();</span></span></code></pre></div><p>:::</p><p>Examples of <strong>correct</strong> code for this rule with <code>&quot;parserOptions&quot;: { &quot;sourceType&quot;: &quot;module&quot; }</code> in the ESLint configuration:</p>`,3),d=i("p",{"sourceType:":"",module:""},"::: correct",-1),c=s(`<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*eslint no-implicit-globals: &quot;error&quot;*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foo and bar are local to module</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span></code></pre></div><p>:::</p><h3 id="global-variable-leaks" tabindex="-1">Global variable leaks <a class="header-anchor" href="#global-variable-leaks" aria-label="Permalink to &quot;Global variable leaks&quot;">​</a></h3><p>When the code is not in <code>strict</code> mode, an assignment to an undeclared variable creates a new global variable. This will happen even if the code is in a function.</p><p>This does not apply to ES modules since the module code is implicitly in <code>strict</code> mode.</p><p>Examples of <strong>incorrect</strong> code for this rule:</p>`,6),k=i("p",{"sourceType:":"",script:""},"::: incorrect",-1),g=s(`<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*eslint no-implicit-globals: &quot;error&quot;*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">baz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Intended to be this.a = 1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>:::</p><h3 id="read-only-global-variables" tabindex="-1">Read-only global variables <a class="header-anchor" href="#read-only-global-variables" aria-label="Permalink to &quot;Read-only global variables&quot;">​</a></h3><p>This rule also disallows redeclarations of read-only global variables and assignments to read-only global variables.</p><p>A read-only global variable can be a built-in ES global (e.g. <code>Array</code>), an environment specific global (e.g. <code>window</code> in the browser environment), or a global variable defined as <code>readonly</code> in the configuration file or in a <code>/*global */</code> comment.</p><ul><li><a href="./../use/configure#specifying-environments">Specifying Environments</a></li><li><a href="./../use/configure#specifying-globals">Specifying Globals</a></li></ul><p>Examples of <strong>incorrect</strong> code for this rule:</p>`,7),E=i("p",{"sourceType:":"",script:""},"::: incorrect",-1),u=s(`<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*eslint no-implicit-globals: &quot;error&quot;*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*global foo:readonly*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Array </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object;</span></span></code></pre></div><p>:::</p><h3 id="const-let-and-class-declarations" tabindex="-1"><code>const</code>, <code>let</code> and <code>class</code> declarations <a class="header-anchor" href="#const-let-and-class-declarations" aria-label="Permalink to &quot;\`const\`, \`let\` and \`class\` declarations&quot;">​</a></h3><p>Lexical declarations <code>const</code> and <code>let</code>, as well as <code>class</code> declarations, create variables that are block-scoped.</p><p>However, when declared in the top-level of a browser script these variables are not &#39;script-scoped&#39;. They are actually created in the global scope and could produce name collisions with <code>var</code>, <code>const</code> and <code>let</code> variables and <code>function</code> and <code>class</code> declarations from other scripts. This does not apply to ES and CommonJS modules.</p><p>If the variable is intended to be local to the script, wrap the code with a block or with an immediately-invoked function expression (IIFE).</p><p>Examples of <strong>correct</strong> code for this rule with <code>&quot;lexicalBindings&quot;</code> option set to <code>false</code> (default):</p>`,7),y=i("p",{"sourceType:":"",script:""},"::: correct",-1),b=s(`<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*eslint no-implicit-globals: [&quot;error&quot;, {&quot;lexicalBindings&quot;: false}]*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baz;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span></code></pre></div><p>:::</p><p>Examples of <strong>incorrect</strong> code for this rule with <code>&quot;lexicalBindings&quot;</code> option set to <code>true</code>:</p>`,3),_=i("p",{"sourceType:":"",script:""},"::: incorrect",-1),m=s(`<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*eslint no-implicit-globals: [&quot;error&quot;, {&quot;lexicalBindings&quot;: true}]*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baz;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span></code></pre></div><p>:::</p><p>Examples of <strong>correct</strong> code for this rule with <code>&quot;lexicalBindings&quot;</code> option set to <code>true</code>:</p>`,3),v=i("p",{"sourceType:":"",script:""},"::: correct",-1),A=s(`<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*eslint no-implicit-globals: [&quot;error&quot;, {&quot;lexicalBindings&quot;: true}]*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baz;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baz;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}());</span></span></code></pre></div><p>:::</p><p>If you intend to create a global <code>const</code> or <code>let</code> variable or a global <code>class</code> declaration, to be used from other scripts, be aware that there are certain differences when compared to the traditional methods, which are <code>var</code> declarations and assigning to a property of the global <code>window</code> object:</p><ul><li>Lexically declared variables cannot be conditionally created. A script cannot check for the existence of a variable and then create a new one. <code>var</code> variables are also always created, but redeclarations do not cause runtime exceptions.</li><li>Lexically declared variables do not create properties on the global object, which is what a consuming script might expect.</li><li>Lexically declared variables are shadowing properties of the global object, which might produce errors if a consuming script is using both the variable and the property.</li><li>Lexically declared variables can produce a permanent Temporal Dead Zone (TDZ) if the initialization throws an exception. Even the <code>typeof</code> check is not safe from TDZ reference exceptions.</li></ul><p>Examples of <strong>incorrect</strong> code for this rule with <code>&quot;lexicalBindings&quot;</code> option set to <code>true</code>:</p>`,5),f=i("p",{"sourceType:":"",script:""},"::: incorrect",-1),F=s(`<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*eslint no-implicit-globals: [&quot;error&quot;, {&quot;lexicalBindings&quot;: true}]*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MyGlobalFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}());</span></span></code></pre></div><p>:::</p><p>Examples of <strong>correct</strong> code for this rule with <code>&quot;lexicalBindings&quot;</code> option set to <code>true</code>:</p>`,3),D=i("p",{"sourceType:":"",script:""},"::: correct",-1),C=s(`<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*eslint no-implicit-globals: [&quot;error&quot;, {&quot;lexicalBindings&quot;: true}]*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.MyGlobalFunction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}());</span></span></code></pre></div><p>:::</p><h3 id="exported" tabindex="-1">exported <a class="header-anchor" href="#exported" aria-label="Permalink to &quot;exported&quot;">​</a></h3><p>You can use <code>/* exported variableName */</code> block comments in the same way as in <a href="./no-unused-vars"><code>no-unused-vars</code></a>. See the <a href="./no-unused-vars#exported"><code>no-unused-vars</code> exported section</a> for details.</p><p>Examples of <strong>correct</strong> code for <code>/* exported variableName */</code> operation:</p>`,5),T=i("p",{"sourceType:":"",script:""},"::: correct",-1),w=s(`<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* eslint no-implicit-globals: error */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* exported global_var */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> global_var </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>:::</p><h2 id="when-not-to-use-it" tabindex="-1">When Not To Use It <a class="header-anchor" href="#when-not-to-use-it" aria-label="Permalink to &quot;When Not To Use It&quot;">​</a></h2><p>In the case of a browser script, if you want to be able to explicitly declare variables and functions in the global scope, and your code is in strict mode or you don&#39;t want this rule to warn you about undeclared variables, and you also don&#39;t want this rule to warn you about read-only globals, you can disable this rule.</p><p>In the case of a CommonJS module, if your code is in strict mode or you don&#39;t want this rule to warn you about undeclared variables, and you also don&#39;t want this rule to warn you about the read-only globals, you can disable this rule.</p><p>In the case of an ES module, if you don&#39;t want this rule to warn you about the read-only globals you can disable this rule.</p>`,6),x=[l,o,p,h,r,d,c,k,g,E,u,y,b,_,m,v,A,f,F,D,C,T,w];function q(S,B,I,P,j,V){return n(),e("div",null,x)}const z=a(t,[["render",q]]);export{R as __pageData,z as default};
