import{_ as e,c as s,o as i,a3 as a}from"./chunks/framework.D8Wt_3VJ.js";const m=JSON.parse('{"title":"Disallow require() expressions which import private modules (n/no-unpublished-require)","description":"","frontmatter":{},"headers":[],"relativePath":"rules/n/no-unpublished-require.md","filePath":"rules/n/no-unpublished-require.md"}'),o={name:"rules/n/no-unpublished-require.md"},t=a(`<h1 id="disallow-require-expressions-which-import-private-modules-n-no-unpublished-require" tabindex="-1">Disallow <code>require()</code> expressions which import private modules (<code>n/no-unpublished-require</code>) <a class="header-anchor" href="#disallow-require-expressions-which-import-private-modules-n-no-unpublished-require" aria-label="Permalink to &quot;Disallow \`require()\` expressions which import private modules (\`n/no-unpublished-require\`)&quot;">​</a></h1><p>💼 This rule is enabled in the following <a href="https://github.com/eslint-community/eslint-plugin-n#-configs" target="_blank" rel="noreferrer">configs</a>: ☑️ <code>flat/recommended</code>, 🟢 <code>flat/recommended-module</code>, ✅ <code>flat/recommended-script</code>, ☑️ <code>recommended</code>, 🟢 <code>recommended-module</code>, ✅ <code>recommended-script</code>.</p><p>If a <code>require()</code> expression&#39;s target is not published, the program works in local, but will not work after published to npm. This rule disallows <code>require()</code> expressions of unpublished files/modules.</p><h2 id="📖-rule-details" tabindex="-1">📖 Rule Details <a class="header-anchor" href="#📖-rule-details" aria-label="Permalink to &quot;📖 Rule Details&quot;">​</a></h2><p>If a source code file satisfies all of the following conditions, the file is *published*.</p><ul><li><code>&quot;files&quot;</code> field of <code>package.json</code> includes the file or <code>&quot;files&quot;</code> field of <code>package.json</code> does not exist.</li><li><code>.npmignore</code> does not include the file.</li></ul><p>Then this rule warns <code>require()</code> expressions in *published* files if the <code>require()</code> expression imports *unpublished* files or the packages of <code>devDependencies</code>.</p><blockquote><p>This intends to prevent &quot;Module Not Found&quot; error after <code>npm publish</code>.<br> 💡 If you want to import <code>devDependencies</code>, please write <code>.npmignore</code> or <code>&quot;files&quot;</code> field of <code>package.json</code>.</p></blockquote><h3 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;rules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;n/no-unpublished-require&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;allowModules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;convertPath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;tryExtensions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="allowmodules" tabindex="-1">allowModules <a class="header-anchor" href="#allowmodules" aria-label="Permalink to &quot;allowModules&quot;">​</a></h4><p>This can be configured in the rule options or as a shared setting <a href="./../shared-settings#allowmodules"><code>settings.allowModules</code></a>. Please see the shared settings documentation for more information.</p><h4 id="resolvepaths" tabindex="-1">resolvePaths <a class="header-anchor" href="#resolvepaths" aria-label="Permalink to &quot;resolvePaths&quot;">​</a></h4><p>This can be configured in the rule options or as a shared setting <a href="./../shared-settings#resolvepaths"><code>settings.resolvePaths</code></a>. Please see the shared settings documentation for more information.</p><h4 id="convertpath" tabindex="-1">convertPath <a class="header-anchor" href="#convertpath" aria-label="Permalink to &quot;convertPath&quot;">​</a></h4><p>This can be configured in the rule options or as a shared setting <a href="./../shared-settings#convertpath"><code>settings.convertPath</code></a>. Please see the shared settings documentation for more information.</p><h4 id="tryextensions" tabindex="-1">tryExtensions <a class="header-anchor" href="#tryextensions" aria-label="Permalink to &quot;tryExtensions&quot;">​</a></h4><p>This can be configured in the rule options or as a shared setting <a href="./../shared-settings#tryextensions"><code>settings.tryExtensions</code></a>. Please see the shared settings documentation for more information.</p><h2 id="🔎-implementation" tabindex="-1">🔎 Implementation <a class="header-anchor" href="#🔎-implementation" aria-label="Permalink to &quot;🔎 Implementation&quot;">​</a></h2><ul><li><a href="../../lib/rules/no-unpublished-require.js">Rule source</a></li><li><a href="../../tests/lib/rules/no-unpublished-require.js">Test source</a></li></ul>`,20),n=[t];function l(r,h,d,p,u,c){return i(),s("div",null,n)}const f=e(o,[["render",l]]);export{m as __pageData,f as default};
