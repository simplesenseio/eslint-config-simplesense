import{_ as n,c as l,a1 as a,G as r,w as h,B as o,o as p,j as i,a as s}from"./chunks/framework.DHJwed8E.js";const m=JSON.parse('{"title":"regexp/no-misleading-capturing-group","description":"disallow capturing groups that do not behave as one would expect","frontmatter":{"pageClass":"rule-details","sidebarDepth":0,"title":"regexp/no-misleading-capturing-group","description":"disallow capturing groups that do not behave as one would expect","since":"v1.12.0"},"headers":[],"relativePath":"rules/regexp/no-misleading-capturing-group.md","filePath":"rules/regexp/no-misleading-capturing-group.md"}'),d={name:"rules/regexp/no-misleading-capturing-group.md"};function k(g,e,c,u,F,E){const t=o("eslint-code-block");return p(),l("div",null,[e[1]||(e[1]=a('<h1 id="regexp-no-misleading-capturing-group" tabindex="-1">regexp/no-misleading-capturing-group <a class="header-anchor" href="#regexp-no-misleading-capturing-group" aria-label="Permalink to &quot;regexp/no-misleading-capturing-group&quot;">‚Äã</a></h1><p>üíº This rule is enabled in the following configs: üü¢ <code>flat/recommended</code>, üîµ <code>recommended</code>.</p><p>üí° This rule is manually fixable by <a href="https://eslint.org/docs/latest/use/core-concepts#rule-suggestions" target="_blank" rel="noreferrer">editor suggestions</a>.</p><blockquote><p>disallow capturing groups that do not behave as one would expect</p></blockquote><h2 id="rule-details" tabindex="-1">üìñ Rule Details <a class="header-anchor" href="#rule-details" aria-label="Permalink to &quot;:book: Rule Details&quot;">‚Äã</a></h2><p>This rule reports capturing groups that capture less text than their pattern might suggest.</p><p>E.g. in <code>/a+(a*)/</code>, <code>(a*)</code> will <strong>always</strong> capture 0 characters because all <code>a</code>s are already consumed by <code>a+</code>. This is quite surprising behavior because <code>a*</code> suggests that the capturing group captures as many <code>a</code>s as possible.</p><p>Misleading capturing groups in regex indicate either unnecessary code that can be removed or an error in the regex. Which one it is, depends on the intended behavior of the regex and cannot be determined by this rule.</p><p>E.g. if the above example is really supposed to capture 0 characters, then the regex should be changed to <code>/a+()/</code> to make the intention explicit. Otherwise, then the parts of the regex surrounding <code>(a*)</code> have to be rewritten.</p><p>This rule generally assumes that the regex behaves correctly, despite its misleading form, when suggesting fixes. Suggested fixes therefor remove the misleading elements <strong>without changing the behavior</strong> of the regex.</p>',10)),r(t,null,{default:h(()=>e[0]||(e[0]=[i("div",{class:"language-js vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"js"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'/* eslint regexp/no-misleading-capturing-group: "error" */')]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"/* ‚úì GOOD */")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"var"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," foo "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," /"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#DBEDFF"}},"a"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#DBEDFF"}},"(b"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"*"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#DBEDFF"}},")"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"/")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"/* ‚úó BAD */")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"var"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," foo "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," /"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#DBEDFF"}},"a"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#DBEDFF"}},"(a"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"*"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#DBEDFF"}},")"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"/")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"var"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," foo "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," /"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\w"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#DBEDFF"}},"("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\d"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"*"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#DBEDFF"}},")"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"/")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"var"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," foo "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," /"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"^"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#DBEDFF"}},"(a"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"*"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#DBEDFF"}},")"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"."),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"/")])])])],-1)])),_:1}),e[2]||(e[2]=a(`<h2 id="options" tabindex="-1">üîß Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;:wrench: Options&quot;">‚Äã</a></h2><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;regexp/no-misleading-capturing-group&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;reportBacktrackingEnds&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><p><code>reportBacktrackingEnds</code></p><p>This rule will report quantifiers at the end of capturing groups that might backtrack for certain strings.</p><p>E.g. when <code>/^(a*).+$/m</code> is used to match the string <code>&quot;aa&quot;</code>, then <code>a*</code> will capture both <code>a</code>s at first, but is then forced to give up the last <code>a</code> to <code>.+</code> to make the whole regex accept. So <code>(a*)</code> only capture the first <code>a</code>. This is misleading because one would expect that <code>(a*)</code> should capture all <code>a</code>s at the start of the string, but this is not the case.</p><p>Because this behavior might be intentional, some users might want to turn off this type of reporting.</p></li></ul><h2 id="version" tabindex="-1">üöÄ Version <a class="header-anchor" href="#version" aria-label="Permalink to &quot;:rocket: Version&quot;">‚Äã</a></h2><p>This rule was introduced in eslint-plugin-regexp v1.12.0</p><h2 id="implementation" tabindex="-1">üîç Implementation <a class="header-anchor" href="#implementation" aria-label="Permalink to &quot;:mag: Implementation&quot;">‚Äã</a></h2><ul><li><a href="https://github.com/ota-meshi/eslint-plugin-regexp/blob/master/lib/rules/no-misleading-capturing-group.ts" target="_blank" rel="noreferrer">Rule source</a></li><li><a href="https://github.com/ota-meshi/eslint-plugin-regexp/blob/master/tests/lib/rules/no-misleading-capturing-group.ts" target="_blank" rel="noreferrer">Test source</a></li></ul>`,7))])}const b=n(d,[["render",k]]);export{m as __pageData,b as default};
