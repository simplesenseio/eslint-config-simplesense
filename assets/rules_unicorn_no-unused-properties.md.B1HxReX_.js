import{_ as i,c as e,a1 as a,o as n}from"./chunks/framework.DHJwed8E.js";const c=JSON.parse('{"title":"Disallow unused object properties","description":"","frontmatter":{},"headers":[],"relativePath":"rules/unicorn/no-unused-properties.md","filePath":"rules/unicorn/no-unused-properties.md"}'),t={name:"rules/unicorn/no-unused-properties.md"};function l(p,s,h,o,r,k){return n(),e("div",null,s[0]||(s[0]=[a(`<h1 id="disallow-unused-object-properties" tabindex="-1">Disallow unused object properties <a class="header-anchor" href="#disallow-unused-object-properties" aria-label="Permalink to &quot;Disallow unused object properties&quot;">â€‹</a></h1><p>ðŸš« This rule is <em>disabled</em> in the âœ… <code>recommended</code> <a href="https://github.com/sindresorhus/eslint-plugin-unicorn#preset-configs-eslintconfigjs" target="_blank" rel="noreferrer">config</a>.</p><p>Unused properties, much like unused variables, are often a result of incomplete refactoring and may confuse readers.</p><p>This rule is primarily useful when you use objects to group constants or model enumerations. It is much harder to predict class properties usage, and practically impossible to predict reflective property access. This rule ignores cases like that.</p><h2 id="example-use-cases" tabindex="-1">Example use cases <a class="header-anchor" href="#example-use-cases" aria-label="Permalink to &quot;Example use cases&quot;">â€‹</a></h2><p>When using <a href="https://reactjs.org" target="_blank" rel="noreferrer">React</a>&#39;s inline styles or one of <a href="https://michelebertoli.github.io/css-in-js/" target="_blank" rel="noreferrer">many CSS-in-JS</a> like <a href="https://github.com/threepointone/glamor" target="_blank" rel="noreferrer">glamor</a>, one might find it helpful to group component styles into a constant object. Later you might remove one of the styles, but forget to remove its definition, especially if the component grew in complexity by that time. If these were defined as separate constants, ESLint&#39;s builtin <code>no-unused-vars</code> rule would have helped, but they are not. That&#39;s when the <code>no-unused-properties</code> rules becomes useful.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> styles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	success: { â€¦ },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	danger: { â€¦ } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;- Property \`danger\` is defined but never used</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({style: styles.success});</span></span></code></pre></div><p>This issue extends to most enumeration and const-like use cases. Below is an example straight from <a href="https://github.com/twbs/bootstrap/blob/19f70f9d4ccca132f196011958c1b72462c698e7/js/src/scrollspy.js#L44" target="_blank" rel="noreferrer">Bootstrap&#39;s <code>scrollspy</code></a>. The file contains about 300 lines of DOM/jQuery complexity. It&#39;s practically impossible to notice the issue manually. But this extra property indicates that authors intended but forgot to handle dropdown menus specially, or at least have a useless constant defined.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ClassName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	DROPDOWN_ITEM: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dropdown-item&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	DROPDOWN_MENU: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dropdown-menu&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;- Property \`DROPDOWN_MENU\` is defined but never used</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	ACTIVE: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;active&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="fail" tabindex="-1">Fail <a class="header-anchor" href="#fail" aria-label="Permalink to &quot;Fail&quot;">â€‹</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">const enum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	used: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	unused: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // &lt;- Property \`unused\` is defined but never used.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(enum.used);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">used</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> enum;</span></span></code></pre></div><h2 id="pass" tabindex="-1">Pass <a class="header-anchor" href="#pass" aria-label="Permalink to &quot;Pass&quot;">â€‹</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">const enum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	used: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	usedToo: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(enum); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The whole object is used</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(enum.used, enum.usedToo); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Every property is used individually</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">enum[x] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Unpredictable, all properties are considered to be used</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Objects with methods are skipped too, all properties are considered used</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	used: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="scope-and-limitations" tabindex="-1">Scope and limitations <a class="header-anchor" href="#scope-and-limitations" aria-label="Permalink to &quot;Scope and limitations&quot;">â€‹</a></h2><p>This rule tries hard not to report potentially used properties as unused. Basically, all supported use cases are enum-like as shown above, more complex cases are ignored. Detailed list of limitations follows.</p><ul><li>Does not predict dynamic property access. That is, <code>object[keys]</code> says that all properties of an object are potentially used. This is as unpredictable for this rule as <code>eval(...)</code> is for the <code>no-unused-vars</code> rule.</li><li>Same goes for computed property keys in object definitions, like <code>{[key]: value}</code>.</li><li>If a variable is unused, it is not checked. This is done to play nicely with the <code>no-unused-vars</code> rule, which everybody should have enabled at all times.</li><li>Does not check objects used as an argument. If you call <code>f(object)</code>, it behaves like you used all of its properties, since it&#39;s hard to predict what a function would do with the object.</li><li>If you call a method on an object, it is ignored. Because of <code>this</code>, it&#39;s basically the same as calling a function on an object.</li><li>If you assign to an object, it is ignored. Even if the key you assign to is static.</li><li>Classes are not checked.</li><li>Prototypes are not checked. Only own properties are.</li><li>Does not follow objects across files. If you export an object, it&#39;s like if you used all of its properties.</li></ul><p>If you want to lift some of these limitations, you should try tools like <a href="https://flow.org" target="_blank" rel="noreferrer">Flow</a> or <a href="https://www.typescriptlang.org" target="_blank" rel="noreferrer">TypeScript</a>.</p>`,17)]))}const u=i(t,[["render",l]]);export{c as __pageData,u as default};
