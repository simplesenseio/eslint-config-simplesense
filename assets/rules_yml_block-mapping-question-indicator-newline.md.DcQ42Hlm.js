import{_ as s,c as l,I as t,w as o,a3 as a,D as r,o as c,j as e,a as i}from"./chunks/framework.ZJ0k6Sl1.js";const E=JSON.parse('{"title":"yml/block-mapping-question-indicator-newline","description":"enforce consistent line breaks after `?` indicator","frontmatter":{"pageClass":"rule-details","sidebarDepth":0,"title":"yml/block-mapping-question-indicator-newline","description":"enforce consistent line breaks after `?` indicator","since":"v0.5.0"},"headers":[],"relativePath":"rules/yml/block-mapping-question-indicator-newline.md","filePath":"rules/yml/block-mapping-question-indicator-newline.md"}'),p={name:"rules/yml/block-mapping-question-indicator-newline.md"},h=a('<h1 id="yml-block-mapping-question-indicator-newline" tabindex="-1">yml/block-mapping-question-indicator-newline <a class="header-anchor" href="#yml-block-mapping-question-indicator-newline" aria-label="Permalink to &quot;yml/block-mapping-question-indicator-newline&quot;">​</a></h1><blockquote><p>enforce consistent line breaks after <code>?</code> indicator</p></blockquote><ul><li>⚙️ This rule is included in <code>&quot;plugin:yml/standard&quot;</code>.</li><li>🔧 The <code>--fix</code> option on the <a href="https://eslint.org/docs/user-guide/command-line-interface#fixing-problems" target="_blank" rel="noreferrer">command line</a> can automatically fix some of the problems reported by this rule.</li></ul><h2 id="rule-details" tabindex="-1">📖 Rule Details <a class="header-anchor" href="#rule-details" aria-label="Permalink to &quot;:book: Rule Details&quot;">​</a></h2><p>This rule aims to enforce consistent line breaks after <code>?</code> indicator.</p>',5),d=e("div",{class:"language-yaml vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"yaml"),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# eslint yml/block-mapping-question-indicator-newline: 'error'")]),i(`
`),e("span",{class:"line"}),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# ✓ GOOD")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"? "),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"GOOD"')]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},": "),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"foo"')]),i(`
`),e("span",{class:"line"}),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"---")]),i(`
`),e("span",{class:"line"}),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# ✗ BAD")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"?")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'  "BAD"')]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},": "),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"bar"')])])])],-1),k=a(`<h2 id="options" tabindex="-1">🔧 Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;:wrench: Options&quot;">​</a></h2><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">yml/block-mapping-question-indicator-newline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">error</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">never</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # or &quot;always&quot;</span></span></code></pre></div><ul><li><code>&quot;always&quot;</code> ... Requires line breaks after after <code>?</code> indicator of block style mappings.</li><li><code>&quot;never&quot;</code> ... Disallow line breaks after after <code>?</code> indicator of block style mappings.</li></ul><h2 id="related-rules" tabindex="-1">👫 Related rules <a class="header-anchor" href="#related-rules" aria-label="Permalink to &quot;:couple: Related rules&quot;">​</a></h2><ul><li><a href="./flow-sequence-bracket-newline">yml/flow-sequence-bracket-newline</a></li><li><a href="./flow-mapping-curly-newline">yml/flow-mapping-curly-newline</a></li><li><a href="./key-spacing">yml/key-spacing</a></li><li><a href="./block-mapping-colon-indicator-newline">yml/block-mapping-colon-indicator-newline</a></li><li><a href="./block-sequence-hyphen-indicator-newline">yml/block-sequence-hyphen-indicator-newline</a></li></ul><h2 id="version" tabindex="-1">🚀 Version <a class="header-anchor" href="#version" aria-label="Permalink to &quot;:rocket: Version&quot;">​</a></h2><p>This rule was introduced in eslint-plugin-yml v0.5.0</p><h2 id="implementation" tabindex="-1">🔍 Implementation <a class="header-anchor" href="#implementation" aria-label="Permalink to &quot;:mag: Implementation&quot;">​</a></h2><ul><li><a href="https://github.com/ota-meshi/eslint-plugin-yml/blob/master/src/rules/block-mapping-question-indicator-newline.ts" target="_blank" rel="noreferrer">Rule source</a></li><li><a href="https://github.com/ota-meshi/eslint-plugin-yml/blob/master/tests/src/rules/block-mapping-question-indicator-newline.ts" target="_blank" rel="noreferrer">Test source</a></li><li><a href="https://github.com/ota-meshi/eslint-plugin-yml/tree/master/tests/fixtures/rules/block-mapping-question-indicator-newline" target="_blank" rel="noreferrer">Test fixture sources</a></li></ul>`,9);function u(m,g,b,y,f,_){const n=r("eslint-code-block");return c(),l("div",null,[h,t(n,{fix:""},{default:o(()=>[d]),_:1}),k])}const w=s(p,[["render",u]]);export{E as __pageData,w as default};
