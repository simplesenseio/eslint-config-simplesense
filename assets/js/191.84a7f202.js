(window.webpackJsonp=window.webpackJsonp||[]).push([[191],{379:function(e,s,t){"use strict";t.r(s);var a=t(9),n=Object(a.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("Some style guides require or disallow a whitespace immediately after the initial "),s("code",[e._v("//")]),e._v(" or "),s("code",[e._v("/*")]),e._v(" of a comment.\nWhitespace after the "),s("code",[e._v("//")]),e._v(" or "),s("code",[e._v("/*")]),e._v(" makes it easier to read text in comments.\nOn the other hand, commenting out code is easier without having to put a whitespace right after the "),s("code",[e._v("//")]),e._v(" or "),s("code",[e._v("/*")]),e._v(".")]),e._v(" "),s("h2",{attrs:{id:"rule-details"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rule-details"}},[e._v("#")]),e._v(" Rule Details")]),e._v(" "),s("p",[e._v("This rule will enforce consistency of spacing after the start of a comment "),s("code",[e._v("//")]),e._v(" or "),s("code",[e._v("/*")]),e._v(". It also provides several\nexceptions for various documentation styles.")]),e._v(" "),s("h2",{attrs:{id:"options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[e._v("#")]),e._v(" Options")]),e._v(" "),s("p",[e._v("The rule takes two options.")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("The first is a string which be either "),s("code",[e._v('"always"')]),e._v(" or "),s("code",[e._v('"never"')]),e._v(". The default is "),s("code",[e._v('"always"')]),e._v(".")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("If "),s("code",[e._v('"always"')]),e._v(" then the "),s("code",[e._v("//")]),e._v(" or "),s("code",[e._v("/*")]),e._v(" must be followed by at least one whitespace.")])]),e._v(" "),s("li",[s("p",[e._v("If "),s("code",[e._v('"never"')]),e._v(" then there should be no whitespace following.")])])])]),e._v(" "),s("li",[s("p",[e._v("This rule can also take a 2nd option, an object with any of the following keys: "),s("code",[e._v('"exceptions"')]),e._v(" and "),s("code",[e._v('"markers"')]),e._v(".")]),e._v(" "),s("ul",[s("li",[e._v("The "),s("code",[e._v('"exceptions"')]),e._v(" value is an array of string patterns which are considered exceptions to the rule. The rule will not warn when the pattern starts from the beginning of the comment and repeats until the end of the line or "),s("code",[e._v("*/")]),e._v(" if the comment is a single line comment.\nPlease note that exceptions are ignored if the first argument is "),s("code",[e._v('"never"')]),e._v(".")])]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"spaced-comment"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"error"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"always"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"exceptions"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"-"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"+"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),s("ul",[s("li",[e._v("The "),s("code",[e._v('"markers"')]),e._v(" value is an array of string patterns which are considered markers for docblock-style comments,\nsuch as an additional "),s("code",[e._v("/")]),e._v(", used to denote documentation read by doxygen, vsdoc, etc. which must have additional characters.\nThe "),s("code",[e._v('"markers"')]),e._v(" array will apply regardless of the value of the first argument, e.g. "),s("code",[e._v('"always"')]),e._v(" or "),s("code",[e._v('"never"')]),e._v(".")])]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"spaced-comment"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"error"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"always"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"markers"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])])])]),e._v(" "),s("p",[e._v("The difference between a marker and an exception is that a marker only appears at the beginning of the comment whereas\nexceptions can occur anywhere in the comment string.")]),e._v(" "),s("p",[e._v("You can also define separate exceptions and markers for block and line comments. The "),s("code",[e._v('"block"')]),e._v(" object can have an additional key "),s("code",[e._v('"balanced"')]),e._v(", a boolean that specifies if inline block comments should have balanced spacing. The default value is "),s("code",[e._v("false")]),e._v(".")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("If "),s("code",[e._v('"balanced": true')]),e._v(" and "),s("code",[e._v('"always"')]),e._v(" then the "),s("code",[e._v("/*")]),e._v(" must be followed by at least one whitespace, and the "),s("code",[e._v("*/")]),e._v(" must be preceded by at least one whitespace.")])]),e._v(" "),s("li",[s("p",[e._v("If "),s("code",[e._v('"balanced": true')]),e._v(" and "),s("code",[e._v('"never"')]),e._v(" then there should be no whitespace following "),s("code",[e._v("/*")]),e._v(" or preceding "),s("code",[e._v("*/")]),e._v(".")])]),e._v(" "),s("li",[s("p",[e._v("If "),s("code",[e._v('"balanced": false')]),e._v(" then balanced whitespace is not enforced.")])])]),e._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"spaced-comment"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"error"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"always"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"line"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"markers"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"exceptions"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"-"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"+"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"block"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"markers"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"exceptions"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"*"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"balanced"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),s("h3",{attrs:{id:"always"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#always"}},[e._v("#")]),e._v(" always")]),e._v(" "),s("p",[e._v("Examples of "),s("strong",[e._v("incorrect")]),e._v(" code for this rule with the "),s("code",[e._v('"always"')]),e._v(" option:")]),e._v(" "),s("p",[e._v("::: incorrect")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/*eslint spaced-comment: ["error", "always"]*/')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//This is a comment with no whitespace at the beginning")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*This is a comment with no whitespace at the beginning */")]),e._v("\n")])])]),s("p",[e._v(":::")]),e._v(" "),s("p",[e._v("::: incorrect")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/* eslint spaced-comment: ["error", "always", { "block": { "balanced": true } }] */')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/* This is a comment with whitespace at the beginning but not the end*/")]),e._v("\n")])])]),s("p",[e._v(":::")]),e._v(" "),s("p",[e._v("Examples of "),s("strong",[e._v("correct")]),e._v(" code for this rule with the "),s("code",[e._v('"always"')]),e._v(" option:")]),e._v(" "),s("p",[e._v("::: correct")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/* eslint spaced-comment: ["error", "always"] */')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// This is a comment with a whitespace at the beginning")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/* This is a comment with a whitespace at the beginning */")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*\n * This is a comment with a whitespace at the beginning\n */")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*\nThis comment has a newline\n*/")]),e._v("\n")])])]),s("p",[e._v(":::")]),e._v(" "),s("p",[e._v("::: correct")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/* eslint spaced-comment: ["error", "always"] */')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n* I am jsdoc\n*/")]),e._v("\n")])])]),s("p",[e._v(":::")]),e._v(" "),s("h3",{attrs:{id:"never"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#never"}},[e._v("#")]),e._v(" never")]),e._v(" "),s("p",[e._v("Examples of "),s("strong",[e._v("incorrect")]),e._v(" code for this rule with the "),s("code",[e._v('"never"')]),e._v(" option:")]),e._v(" "),s("p",[e._v("::: incorrect")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/*eslint spaced-comment: ["error", "never"]*/')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// This is a comment with a whitespace at the beginning")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/* This is a comment with a whitespace at the beginning */")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/* \\nThis is a comment with a whitespace at the beginning */")]),e._v("\n")])])]),s("p",[e._v(":::")]),e._v(" "),s("p",[e._v("::: incorrect")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/*eslint spaced-comment: ["error", "never", { "block": { "balanced": true } }]*/')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*This is a comment with whitespace at the end */")]),e._v("\n")])])]),s("p",[e._v(":::")]),e._v(" "),s("p",[e._v("Examples of "),s("strong",[e._v("correct")]),e._v(" code for this rule with the "),s("code",[e._v('"never"')]),e._v(" option:")]),e._v(" "),s("p",[e._v("::: correct")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/*eslint spaced-comment: ["error", "never"]*/')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*This is a comment with no whitespace at the beginning */")]),e._v("\n")])])]),s("p",[e._v(":::")]),e._v(" "),s("p",[e._v("::: correct")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/*eslint spaced-comment: ["error", "never"]*/')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n* I am jsdoc\n*/")]),e._v("\n")])])]),s("p",[e._v(":::")]),e._v(" "),s("h3",{attrs:{id:"exceptions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exceptions"}},[e._v("#")]),e._v(" exceptions")]),e._v(" "),s("p",[e._v("Examples of "),s("strong",[e._v("incorrect")]),e._v(" code for this rule with the "),s("code",[e._v('"always"')]),e._v(" option combined with "),s("code",[e._v('"exceptions"')]),e._v(":")]),e._v(" "),s("p",[e._v("::: incorrect")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/* eslint spaced-comment: ["error", "always", { "block": { "exceptions": ["-"] } }] */')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//--------------")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Comment block")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//--------------")]),e._v("\n")])])]),s("p",[e._v(":::")]),e._v(" "),s("p",[e._v("::: incorrect")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/* eslint spaced-comment: ["error", "always", { "exceptions": ["-", "+"] }] */')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//------++++++++")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Comment block")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//------++++++++")]),e._v("\n")])])]),s("p",[e._v(":::")]),e._v(" "),s("p",[e._v("::: incorrect")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/* eslint spaced-comment: ["error", "always", { "exceptions": ["-", "+"] }] */')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*------++++++++*/")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/* Comment block */")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*------++++++++*/")]),e._v("\n")])])]),s("p",[e._v(":::")]),e._v(" "),s("p",[e._v("::: incorrect")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/* eslint spaced-comment: ["error", "always", { "line": { "exceptions": ["-+"] } }] */')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*-+-+-+-+-+-+-+*/")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Comment block")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*-+-+-+-+-+-+-+*/")]),e._v("\n")])])]),s("p",[e._v(":::")]),e._v(" "),s("p",[e._v("::: incorrect")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/* eslint spaced-comment: ["error", "always", { "block": { "exceptions": ["*"] } }] */')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/******** COMMENT *******/")]),e._v("\n")])])]),s("p",[e._v(":::")]),e._v(" "),s("p",[e._v("Examples of "),s("strong",[e._v("correct")]),e._v(" code for this rule with the "),s("code",[e._v('"always"')]),e._v(" option combined with "),s("code",[e._v('"exceptions"')]),e._v(":")]),e._v(" "),s("p",[e._v("::: correct")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/* eslint spaced-comment: ["error", "always", { "exceptions": ["-"] }] */')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//--------------")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Comment block")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//--------------")]),e._v("\n")])])]),s("p",[e._v(":::")]),e._v(" "),s("p",[e._v("::: correct")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/* eslint spaced-comment: ["error", "always", { "line": { "exceptions": ["-"] } }] */')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//--------------")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Comment block")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//--------------")]),e._v("\n")])])]),s("p",[e._v(":::")]),e._v(" "),s("p",[e._v("::: correct")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/* eslint spaced-comment: ["error", "always", { "exceptions": ["*"] }] */')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/****************\n * Comment block\n ****************/")]),e._v("\n")])])]),s("p",[e._v(":::")]),e._v(" "),s("p",[e._v("::: correct")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/* eslint spaced-comment: ["error", "always", { "exceptions": ["-+"] }] */')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//-+-+-+-+-+-+-+")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Comment block")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//-+-+-+-+-+-+-+")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*-+-+-+-+-+-+-+*/")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Comment block")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*-+-+-+-+-+-+-+*/")]),e._v("\n")])])]),s("p",[e._v(":::")]),e._v(" "),s("p",[e._v("::: correct")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/* eslint spaced-comment: ["error", "always", { "block": { "exceptions": ["-+"] } }] */')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*-+-+-+-+-+-+-+*/")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Comment block")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*-+-+-+-+-+-+-+*/")]),e._v("\n")])])]),s("p",[e._v(":::")]),e._v(" "),s("p",[e._v("::: correct")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/* eslint spaced-comment: ["error", "always", { "block": { "exceptions": ["*"] } }] */')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/***************/")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/********\nCOMMENT\n*******/")]),e._v("\n")])])]),s("p",[e._v(":::")]),e._v(" "),s("h3",{attrs:{id:"markers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#markers"}},[e._v("#")]),e._v(" markers")]),e._v(" "),s("p",[e._v("Examples of "),s("strong",[e._v("incorrect")]),e._v(" code for this rule with the "),s("code",[e._v('"always"')]),e._v(" option combined with "),s("code",[e._v('"markers"')]),e._v(":")]),e._v(" "),s("p",[e._v("::: incorrect")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/* eslint spaced-comment: ["error", "always", { "markers": ["/"] }] */')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("///This is a comment with a marker but without whitespace")]),e._v("\n")])])]),s("p",[e._v(":::")]),e._v(" "),s("p",[e._v("::: incorrect")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/*eslint spaced-comment: ["error", "always", { "block": { "markers": ["!"], "balanced": true } }]*/')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*! This is a comment with a marker but without whitespace at the end*/")]),e._v("\n")])])]),s("p",[e._v(":::")]),e._v(" "),s("p",[e._v("::: incorrect")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/*eslint spaced-comment: ["error", "never", { "block": { "markers": ["!"], "balanced": true } }]*/')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*!This is a comment with a marker but with whitespace at the end */")]),e._v("\n")])])]),s("p",[e._v(":::")]),e._v(" "),s("p",[e._v("Examples of "),s("strong",[e._v("correct")]),e._v(" code for this rule with the "),s("code",[e._v('"always"')]),e._v(" option combined with "),s("code",[e._v('"markers"')]),e._v(":")]),e._v(" "),s("p",[e._v("::: correct")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/* eslint spaced-comment: ["error", "always", { "markers": ["/"] }] */')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/// This is a comment with a marker")]),e._v("\n")])])]),s("p",[e._v(":::")]),e._v(" "),s("p",[e._v("::: correct")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/*eslint spaced-comment: ["error", "never", { "markers": ["!<"] }]*/')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//!<This is a line comment with a marker")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*!<this is a block comment with a marker\nsubsequent lines are ignored\n*/")]),e._v("\n")])])]),s("p",[e._v(":::")]),e._v(" "),s("p",[e._v("::: correct")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/* eslint spaced-comment: ["error", "always", { "markers": ["global"] }] */')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*global ABC*/")]),e._v("\n")])])]),s("p",[e._v(":::")])])}),[],!1,null,null,null);s.default=n.exports}}]);