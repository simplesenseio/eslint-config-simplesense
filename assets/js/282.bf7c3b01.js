(window.webpackJsonp=window.webpackJsonp||[]).push([[282],{469:function(e,t,a){"use strict";a.r(t);var s=a(9),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"regexp-optimal-lookaround-quantifier"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regexp-optimal-lookaround-quantifier"}},[e._v("#")]),e._v(" regexp/optimal-lookaround-quantifier")]),e._v(" "),a("blockquote",[a("p",[e._v("disallow the alternatives of lookarounds that end with a non-constant quantifier")])]),e._v(" "),a("ul",[a("li",[e._v("‚öôÔ∏è This rule is included in "),a("code",[e._v('"plugin:regexp/recommended"')]),e._v(".")])]),e._v(" "),a("h2",{attrs:{id:"rule-details"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rule-details"}},[e._v("#")]),e._v(" üìñ Rule Details")]),e._v(" "),a("p",[e._v("Non-constant quantifiers are quantifiers that describe a range (e.g. "),a("code",[e._v("?")]),e._v(", "),a("code",[e._v("*")]),e._v(",\n"),a("code",[e._v("+")]),e._v(", "),a("code",[e._v("{0,1}")]),e._v(", "),a("code",[e._v("{5,9}")]),e._v(", "),a("code",[e._v("{3,}")]),e._v("). They have to match some number of times (the\nminimum) after which further matches are optional until a certain maximum (may\nbe infinite) is reached.")]),e._v(" "),a("p",[e._v("It's obvious that "),a("code",[e._v("/ba{2}/")]),e._v(" and "),a("code",[e._v("/ba{2,6}/")]),e._v(" will match differently because of\nthe different quantifiers of "),a("code",[e._v("a")]),e._v(" but that not the case if for lookarounds. Both\n"),a("code",[e._v("/b(?=a{2})/")]),e._v(" and "),a("code",[e._v("/b(?=a{2,6})/")]),e._v(" will match strings the same way. I.e. for the\ninput string "),a("code",[e._v('"baaa"')]),e._v(", both will create the same match arrays. The two regular\nexpression are actually equivalent, meaning that "),a("code",[e._v("(?=a{2})")]),e._v(" is equivalent to\n"),a("code",[e._v("(?=a{2,6})")]),e._v(".")]),e._v(" "),a("p",[e._v("More generally, if a non-constant quantifier is an "),a("strong",[e._v("end")]),e._v(" of the expression\ntree of a "),a("strong",[e._v("lookahead")]),e._v(", that quantifier can be replaced with a constant\nquantifier that matched the element minimum-if-the-non-constant-quantifier many\ntimes. For "),a("strong",[e._v("lookbehinds")]),e._v(", the non-constant quantifier has to be at the\n"),a("strong",[e._v("start")]),e._v(" of the expression tree as lookbehinds are matched from right to left.")]),e._v(" "),a("eslint-code-block",[a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/* eslint regexp/optimal-lookaround-quantifier: "error" */')]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/* ‚úì GOOD */")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// lookaheads")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("\\w+(?=\\s*:)")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// lookbehinds")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("(?<=ab+)")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/* ‚úó BAD */")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// lookaheads")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("(?=ab+)")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// == /(?=ab)/")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("(?=ab*)")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// == /(?=a)/")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("(?!ab?)")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// == /(?!a)/")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("(?!ab{6,})")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// == /(?!ab{6})/")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// lookbehinds")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("(?<=a+b)")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// == /(?<=ab)/")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("(?<!\\w*\\s*,)")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// == /(?<!,)/")]),e._v("\n")])])])]),e._v(" "),a("h2",{attrs:{id:"options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[e._v("#")]),e._v(" üîß Options")]),e._v(" "),a("p",[e._v("Nothing.")]),e._v(" "),a("h2",{attrs:{id:"compatibility"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compatibility"}},[e._v("#")]),e._v(" ‚ù§Ô∏è Compatibility")]),e._v(" "),a("p",[e._v("This rule was taken from "),a("a",{attrs:{href:"https://github.com/RunDevelopment/eslint-plugin-clean-regex",target:"_blank",rel:"noopener noreferrer"}},[e._v("eslint-plugin-clean-regex"),a("OutboundLink")],1),e._v("."),a("br"),e._v("\nThis rule is compatible with "),a("a",{attrs:{href:"https://github.com/RunDevelopment/eslint-plugin-clean-regex/blob/master/docs/rules/optimal-lookaround-quantifier.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("clean-regex/optimal-lookaround-quantifier"),a("OutboundLink")],1),e._v(" rule.")]),e._v(" "),a("h2",{attrs:{id:"version"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#version"}},[e._v("#")]),e._v(" üöÄ Version")]),e._v(" "),a("p",[e._v("This rule was introduced in eslint-plugin-regexp v0.8.0")]),e._v(" "),a("h2",{attrs:{id:"implementation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[e._v("#")]),e._v(" üîç Implementation")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/ota-meshi/eslint-plugin-regexp/blob/master/lib/rules/optimal-lookaround-quantifier.ts",target:"_blank",rel:"noopener noreferrer"}},[e._v("Rule source"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/ota-meshi/eslint-plugin-regexp/blob/master/tests/lib/rules/optimal-lookaround-quantifier.ts",target:"_blank",rel:"noopener noreferrer"}},[e._v("Test source"),a("OutboundLink")],1)])])],1)}),[],!1,null,null,null);t.default=r.exports}}]);