(window.webpackJsonp=window.webpackJsonp||[]).push([[158],{346:function(t,e,s){"use strict";s.r(e);var n=s(9),a=Object(n.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("Developers often add comments to code which is not complete or needs review. Most likely you want to fix or review the code, and then remove the comment, before you consider the code to be production ready.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TODO: do something")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// FIXME: this is not a good idea")]),t._v("\n")])])]),s("h2",{attrs:{id:"rule-details"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rule-details"}},[t._v("#")]),t._v(" Rule Details")]),t._v(" "),s("p",[t._v("This rule reports comments that include any of the predefined terms specified in its configuration.")]),t._v(" "),s("h2",{attrs:{id:"options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[t._v("#")]),t._v(" Options")]),t._v(" "),s("p",[t._v("This rule has an options object literal:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v('"terms"')]),t._v(": optional array of terms to match. Defaults to "),s("code",[t._v('["todo", "fixme", "xxx"]')]),t._v(". Terms are matched case-insensitively and as whole words: "),s("code",[t._v("fix")]),t._v(" would match "),s("code",[t._v("FIX")]),t._v(" but not "),s("code",[t._v("fixing")]),t._v(". Terms can consist of multiple words: "),s("code",[t._v("really bad idea")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v('"location"')]),t._v(": optional string that configures where in your comments to check for matches. Defaults to "),s("code",[t._v('"start"')]),t._v(". The start is from the first non-decorative character, ignoring whitespace, new lines and characters specified in "),s("code",[t._v("decoration")]),t._v(". The other value is match "),s("code",[t._v("anywhere")]),t._v(" in comments.")]),t._v(" "),s("li",[s("code",[t._v('"decoration"')]),t._v(": optional array of characters that are ignored at the start of a comment, when location is "),s("code",[t._v('"start"')]),t._v(". Defaults to "),s("code",[t._v("[]")]),t._v(". Any sequence of whitespace or the characters from this property are ignored. This option is ignored when location is "),s("code",[t._v('"anywhere"')]),t._v(".")])]),t._v(" "),s("p",[t._v("Example of "),s("strong",[t._v("incorrect")]),t._v(" code for the default "),s("code",[t._v('{ "terms": ["todo", "fixme", "xxx"], "location": "start" }')]),t._v(" options:")]),t._v(" "),s("p",[t._v("::: incorrect")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*eslint no-warning-comments: "error"*/')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\nFIXME\n*/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" results")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TODO")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v(":::")]),t._v(" "),s("p",[t._v("Example of "),s("strong",[t._v("correct")]),t._v(" code for the default "),s("code",[t._v('{ "terms": ["todo", "fixme", "xxx"], "location": "start" }')]),t._v(" options:")]),t._v(" "),s("p",[t._v("::: correct")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*eslint no-warning-comments: "error"*/')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" results")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NOT READY FOR PRIME TIME")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// but too bad, it is not a predefined warning term")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v(":::")]),t._v(" "),s("h3",{attrs:{id:"terms-and-location"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#terms-and-location"}},[t._v("#")]),t._v(" terms and location")]),t._v(" "),s("p",[t._v("Examples of "),s("strong",[t._v("incorrect")]),t._v(" code for the "),s("code",[t._v('{ "terms": ["todo", "fixme", "any other term"], "location": "anywhere" }')]),t._v(" options:")]),t._v(" "),s("p",[t._v("::: incorrect")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*eslint no-warning-comments: ["error", { "terms": ["todo", "fixme", "any other term"], "location": "anywhere" }]*/')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TODO: this")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// todo: this too")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Even this: TODO")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n * The same goes for this TODO comment\n * Or a fixme\n * as well as any other term\n */")]),t._v("\n")])])]),s("p",[t._v(":::")]),t._v(" "),s("p",[t._v("Examples of "),s("strong",[t._v("correct")]),t._v(" code for the "),s("code",[t._v('{ "terms": ["todo", "fixme", "any other term"], "location": "anywhere" }')]),t._v(" options:")]),t._v(" "),s("p",[t._v("::: correct")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*eslint no-warning-comments: ["error", { "terms": ["todo", "fixme", "any other term"], "location": "anywhere" }]*/')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is to do")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// even not any other    term")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// any other terminal")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n * The same goes for block comments\n * with any other interesting term\n * or fix me this\n */")]),t._v("\n")])])]),s("p",[t._v(":::")]),t._v(" "),s("h3",{attrs:{id:"decoration-characters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#decoration-characters"}},[t._v("#")]),t._v(" Decoration Characters")]),t._v(" "),s("p",[t._v("Examples of "),s("strong",[t._v("incorrect")]),t._v(" code for the "),s("code",[t._v('{ "decoration": ["*"] }')]),t._v(" options:")]),t._v(" "),s("p",[t._v("::: incorrect")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*eslint no-warning-comments: ["error", { "decoration": ["*"] }]*/')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//***** todo decorative asterisks are ignored *****//")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * TODO new lines and asterisks are also ignored in block comments.\n */")]),t._v("\n")])])]),s("p",[t._v(":::")]),t._v(" "),s("p",[t._v("Examples of "),s("strong",[t._v("incorrect")]),t._v(" code for the "),s("code",[t._v('{ "decoration": ["/", "*"] }')]),t._v(" options:")]),t._v(" "),s("p",[t._v("::: incorrect")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*eslint no-warning-comments: ["error", { "decoration": ["/", "*"] }]*/')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("////// TODO decorative slashes and whitespace are ignored //////")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//***** todo decorative asterisks are also ignored *****//")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * TODO new lines are also ignored in block comments.\n */")]),t._v("\n")])])]),s("p",[t._v(":::")]),t._v(" "),s("p",[t._v("Examples of "),s("strong",[t._v("correct")]),t._v(" code for the "),s("code",[t._v('{ "decoration": ["/", "*"] }')]),t._v(" options:")]),t._v(" "),s("p",[t._v("::: correct")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*eslint no-warning-comments: ["error", { "decoration": ["/", "*"] }]*/')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//!TODO preceded by non-decoration character")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n *!TODO preceded by non-decoration character in a block comment\n */")]),t._v("\n")])])]),s("p",[t._v(":::")]),t._v(" "),s("h2",{attrs:{id:"when-not-to-use-it"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#when-not-to-use-it"}},[t._v("#")]),t._v(" When Not To Use It")]),t._v(" "),s("ul",[s("li",[t._v("If you have a large code base that was not developed with a policy to not use such warning terms, you might get hundreds of warnings / errors which might be counter-productive if you can't fix all of them (e.g. if you don't get the time to do it) as you might overlook other warnings / errors or get used to many of them and don't pay attention on it anymore.")]),t._v(" "),s("li",[t._v("Same reason as the point above: You shouldn't configure terms that are used very often (e.g. central parts of the native language used in your comments).")])])])}),[],!1,null,null,null);e.default=a.exports}}]);