(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{229:function(t,e,s){"use strict";s.r(e);var n=s(9),a=Object(n.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("Requires or disallows newline at the end of files.")]),t._v(" "),s("p",[t._v("Trailing newlines in non-empty files are a common UNIX idiom. Benefits of\ntrailing newlines include the ability to concatenate or append to files as well\nas output files to the terminal without interfering with shell prompts.")]),t._v(" "),s("h2",{attrs:{id:"rule-details"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rule-details"}},[t._v("#")]),t._v(" Rule Details")]),t._v(" "),s("p",[t._v("This rule enforces at least one newline (or absence thereof) at the end\nof non-empty files.")]),t._v(" "),s("p",[t._v("Prior to v0.16.0 this rule also enforced that there was only a single line at\nthe end of the file. If you still want this behavior, consider enabling\n"),s("a",{attrs:{href:"no-multiple-empty-lines"}},[t._v("no-multiple-empty-lines")]),t._v(" with "),s("code",[t._v("maxEOF")]),t._v(" and/or\n"),s("a",{attrs:{href:"no-trailing-spaces"}},[t._v("no-trailing-spaces")]),t._v(".")]),t._v(" "),s("p",[t._v("Examples of "),s("strong",[t._v("incorrect")]),t._v(" code for this rule:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*eslint eol-last: ["error", "always"]*/')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSmth")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Examples of "),s("strong",[t._v("correct")]),t._v(" code for this rule:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*eslint eol-last: ["error", "always"]*/')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSmth")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\\n\n")])])]),s("h2",{attrs:{id:"options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[t._v("#")]),t._v(" Options")]),t._v(" "),s("p",[t._v("This rule has a string option:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v('"always"')]),t._v(" (default) enforces that files end with a newline (LF)")]),t._v(" "),s("li",[s("code",[t._v('"never"')]),t._v(" enforces that files do not end with a newline")]),t._v(" "),s("li",[s("code",[t._v('"unix"')]),t._v(' (deprecated) is identical to "always"')]),t._v(" "),s("li",[s("code",[t._v('"windows"')]),t._v(' (deprecated) is identical to "always", but will use a CRLF character when autofixing')])]),t._v(" "),s("p",[s("strong",[t._v("Deprecated:")]),t._v(" The options "),s("code",[t._v('"unix"')]),t._v(" and "),s("code",[t._v('"windows"')]),t._v(" are deprecated. If you need to enforce a specific linebreak style, use this rule in conjunction with "),s("code",[t._v("linebreak-style")]),t._v(".")])])}),[],!1,null,null,null);e.default=a.exports}}]);