(window.webpackJsonp=window.webpackJsonp||[]).push([[508],{700:function(t,e,s){"use strict";s.r(e);var a=s(9),n=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"yml-spaced-comment"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#yml-spaced-comment"}},[t._v("#")]),t._v(" yml/spaced-comment")]),t._v(" "),e("blockquote",[e("p",[t._v("enforce consistent spacing after the "),e("code",[t._v("#")]),t._v(" in a comment")])]),t._v(" "),e("ul",[e("li",[t._v("‚öôÔ∏è This rule is included in "),e("code",[t._v('"plugin:yml/standard"')]),t._v(".")]),t._v(" "),e("li",[t._v("üîß The "),e("code",[t._v("--fix")]),t._v(" option on the "),e("a",{attrs:{href:"https://eslint.org/docs/user-guide/command-line-interface#fixing-problems",target:"_blank",rel:"noopener noreferrer"}},[t._v("command line"),e("OutboundLink")],1),t._v(" can automatically fix some of the problems reported by this rule.")])]),t._v(" "),e("h2",{attrs:{id:"rule-details"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rule-details"}},[t._v("#")]),t._v(" üìñ Rule Details")]),t._v(" "),e("p",[t._v("This rule will enforce consistency of spacing after the start of a comment "),e("code",[t._v("#")]),t._v(". It also provides several exceptions for various documentation styles.")]),t._v(" "),e("eslint-code-block",{attrs:{fix:""}},[e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# eslint yml/spaced-comment: 'error'")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ‚úì GOOD")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#‚úó BAD")]),t._v("\n")])])])]),t._v(" "),e("p",[t._v("ESLint core "),e("code",[t._v("spaced-comment")]),t._v(" rule don't work well in YAML. Turn off that rule in YAML files and use "),e("code",[t._v("yml/spaced-comment")]),t._v(" rule."),e("br"),t._v("\nUse the "),e("code",[t._v("overrides")]),t._v(" setting to apply these only to YAML files:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("module"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("overrides")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("files")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*.yaml"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*.yml"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("parser")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"yaml-eslint-parser"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("rules")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"spaced-comment"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"off"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"yml/spaced-comment"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h2",{attrs:{id:"options"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[t._v("#")]),t._v(" üîß Options")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("yml/spaced-comment")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" error\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" always "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# or "never"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("exceptions")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("markers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("ul",[e("li",[t._v("First option\n"),e("ul",[e("li",[e("code",[t._v('"always"')]),t._v(" ... the "),e("code",[t._v("#")]),t._v(" must be followed by at least one whitespace.")]),t._v(" "),e("li",[e("code",[t._v('"never"')]),t._v(" ... should be no whitespace following.")])])]),t._v(" "),e("li",[t._v("Second option\n"),e("ul",[e("li",[e("code",[t._v('"exceptions"')]),t._v(" ... It is an array of string patterns which are considered exceptions to the rule. The rule will not warn when the pattern starts from the beginning of the comment and repeats until the end of the line. Please note that exceptions are ignored if the first argument is "),e("code",[t._v('"never"')]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v('"markers"')]),t._v(" ... It is an array of string patterns which are considered markers for docblock-style comments. The "),e("code",[t._v('"markers"')]),t._v(" array will apply regardless of the value of the first argument, e.g. "),e("code",[t._v('"always"')]),t._v(" or "),e("code",[t._v('"never"')]),t._v(".")])])])]),t._v(" "),e("p",[t._v("See also "),e("a",{attrs:{href:"https://eslint.org/docs/rules/spaced-comment#options",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"related-rules"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#related-rules"}},[t._v("#")]),t._v(" üë´ Related rules")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://eslint.org/docs/rules/spaced-comment",target:"_blank",rel:"noopener noreferrer"}},[t._v("spaced-comment"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"version"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#version"}},[t._v("#")]),t._v(" üöÄ Version")]),t._v(" "),e("p",[t._v("This rule was introduced in eslint-plugin-yml v0.1.0")]),t._v(" "),e("h2",{attrs:{id:"implementation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[t._v("#")]),t._v(" üîç Implementation")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/ota-meshi/eslint-plugin-yml/blob/master/src/rules/spaced-comment.ts",target:"_blank",rel:"noopener noreferrer"}},[t._v("Rule source"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/ota-meshi/eslint-plugin-yml/blob/master/tests/src/rules/spaced-comment.ts",target:"_blank",rel:"noopener noreferrer"}},[t._v("Test source"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/ota-meshi/eslint-plugin-yml/tree/master/tests/fixtures/rules/spaced-comment",target:"_blank",rel:"noopener noreferrer"}},[t._v("Test fixture sources"),e("OutboundLink")],1)])]),t._v(" "),e("p",[e("sup",[t._v("Taken with ‚ù§Ô∏è "),e("a",{attrs:{href:"https://eslint.org/docs/rules/spaced-comment",target:"_blank",rel:"noopener noreferrer"}},[t._v("from ESLint core"),e("OutboundLink")],1)])])],1)}),[],!1,null,null,null);e.default=n.exports}}]);