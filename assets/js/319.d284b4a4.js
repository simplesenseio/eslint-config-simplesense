(window.webpackJsonp=window.webpackJsonp||[]).push([[319],{514:function(e,t,s){"use strict";s.r(t);var r=s(9),a=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"regexp-simplify-set-operations"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#regexp-simplify-set-operations"}},[e._v("#")]),e._v(" regexp/simplify-set-operations")]),e._v(" "),t("p",[e._v("💼 This rule is enabled in the following configs: 🟢 "),t("code",[e._v("flat/recommended")]),e._v(", 🔵 "),t("code",[e._v("recommended")]),e._v(".")]),e._v(" "),t("p",[e._v("🔧 This rule is automatically fixable by the "),t("a",{attrs:{href:"https://eslint.org/docs/latest/user-guide/command-line-interface#--fix",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("--fix")]),e._v(" CLI option"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("blockquote",[t("p",[e._v("require simplify set operations")])]),e._v(" "),t("h2",{attrs:{id:"rule-details"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rule-details"}},[e._v("#")]),e._v(" 📖 Rule Details")]),e._v(" "),t("p",[e._v("This rule aims to optimize patterns by simplifying set operations in character classes (with "),t("code",[e._v("v")]),e._v(" flag).")]),e._v(" "),t("p",[e._v("This rule does not report simple nested negations. (e.g. "),t("code",[e._v("/[^[^abc]]/v")]),e._v(")"),t("br"),e._v("\nIf you want to report simple nested negations, use the "),t("RouterLink",{attrs:{to:"/rules/regexp/negation.html"}},[e._v("regexp/negation")]),e._v(" rule.")],1),e._v(" "),t("eslint-code-block",{attrs:{fix:""}},[t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/* eslint regexp/simplify-set-operations: "error" */')]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/* ✗ BAD */")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" re "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("[a&&[^b]]")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[e._v("v")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// -> /[a--b]/v")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" re "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("[[^b]&&a]")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[e._v("v")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// -> /[a--b]/v")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" re "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("[a--[^b]]")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[e._v("v")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// -> /[a&&b]/v")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" re "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("[[^a]&&[^b]]")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[e._v("v")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// -> /[^ab]/v")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" re "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("[[^a][^b]]")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[e._v("v")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// -> /[^a&&b]/v")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/* ✓ GOOD */")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" re "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("[a--b]")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[e._v("v")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" re "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("[a&&b]")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[e._v("v")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" re "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("[^ab]")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[e._v("v")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" re "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("[^a&&b]")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[e._v("v")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])])]),e._v(" "),t("h3",{attrs:{id:"how-does-this-rule-work"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#how-does-this-rule-work"}},[e._v("#")]),e._v(" How does this rule work?")]),e._v(" "),t("p",[e._v("This rule attempts to simplify set operations in the ways listed below:")]),e._v(" "),t("h4",{attrs:{id:"de-morgan-s-laws"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#de-morgan-s-laws"}},[e._v("#")]),e._v(" De Morgan's laws")]),e._v(" "),t("p",[e._v("This rule uses De Morgan's laws to look for patterns that can convert multiple negations into a single negation, reports on them, and auto-fix them."),t("br"),e._v("\nFor example, "),t("code",[e._v("/[[^a]&&[^b]]/v")]),e._v(" is equivalent to "),t("code",[e._v("/[^ab]/v")]),e._v(", and "),t("code",[e._v("/[[^a][^b]]/v")]),e._v(" is equivalent to "),t("code",[e._v("/[^a&&b]/v")]),e._v(".")]),e._v(" "),t("p",[e._v("See "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/De_Morgan's_laws",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://en.wikipedia.org/wiki/De_Morgan's_laws"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("h4",{attrs:{id:"conversion-from-the-intersection-to-the-subtraction"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conversion-from-the-intersection-to-the-subtraction"}},[e._v("#")]),e._v(" Conversion from the intersection to the subtraction")]),e._v(" "),t("p",[e._v("Intersection sets with complement operands can be converted to difference sets."),t("br"),e._v("\nThe rule looks for character class intersection with negation operands, reports on them, auto-fix them."),t("br"),e._v("\nFor example, "),t("code",[e._v("/[a&&[^b]]/v")]),e._v(" is equivalent to "),t("code",[e._v("/[a--b]/v")]),e._v(", "),t("code",[e._v("/[[^a]&&b]/v")]),e._v(" is equivalent to "),t("code",[e._v("/[b--a]/v")]),e._v(".")]),e._v(" "),t("h4",{attrs:{id:"conversion-from-the-subtraction-to-the-intersection"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conversion-from-the-subtraction-to-the-intersection"}},[e._v("#")]),e._v(" Conversion from the subtraction to the intersection")]),e._v(" "),t("p",[e._v("Difference set with a complement operand on the right side can be converted to intersection sets."),t("br"),e._v("\nThe rule looks for character class subtraction with negation operand on the right side, reports on them, auto-fix them."),t("br"),e._v("\nFor example, "),t("code",[e._v("/[a--[^b]]/v")]),e._v(" is equivalent to "),t("code",[e._v("/[a&&b]/v")]),e._v(".")]),e._v(" "),t("h3",{attrs:{id:"auto-fixes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#auto-fixes"}},[e._v("#")]),e._v(" Auto Fixes")]),e._v(" "),t("p",[e._v("This rule's auto-fix does not remove unnecessary brackets. For example, "),t("code",[e._v("/[[^a]&&[^b]]/v")]),e._v(" will be automatically fixed to "),t("code",[e._v("/[^[a][b]]/v")]),e._v("."),t("br"),e._v("\nIf you want to remove unnecessary brackets (e.g. auto-fixed to "),t("code",[e._v("/[^ab]/v")]),e._v("), use "),t("RouterLink",{attrs:{to:"/rules/regexp/no-useless-character-class.html"}},[e._v("regexp/no-useless-character-class")]),e._v(" rule together.")],1),e._v(" "),t("h2",{attrs:{id:"options"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[e._v("#")]),e._v(" 🔧 Options")]),e._v(" "),t("p",[e._v("Nothing.")]),e._v(" "),t("h2",{attrs:{id:"related-rules"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#related-rules"}},[e._v("#")]),e._v(" 👫 Related rules")]),e._v(" "),t("ul",[t("li",[t("RouterLink",{attrs:{to:"/rules/regexp/negation.html"}},[e._v("regexp/negation")])],1),e._v(" "),t("li",[t("RouterLink",{attrs:{to:"/rules/regexp/no-useless-character-class.html"}},[e._v("regexp/no-useless-character-class")])],1)]),e._v(" "),t("h2",{attrs:{id:"version"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#version"}},[e._v("#")]),e._v(" 🚀 Version")]),e._v(" "),t("p",[e._v("This rule was introduced in eslint-plugin-regexp v2.0.0-next.11")]),e._v(" "),t("h2",{attrs:{id:"implementation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[e._v("#")]),e._v(" 🔍 Implementation")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/ota-meshi/eslint-plugin-regexp/blob/master/lib/rules/simplify-set-operations.ts",target:"_blank",rel:"noopener noreferrer"}},[e._v("Rule source"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/ota-meshi/eslint-plugin-regexp/blob/master/tests/lib/rules/simplify-set-operations.ts",target:"_blank",rel:"noopener noreferrer"}},[e._v("Test source"),t("OutboundLink")],1)])])],1)}),[],!1,null,null,null);t.default=a.exports}}]);