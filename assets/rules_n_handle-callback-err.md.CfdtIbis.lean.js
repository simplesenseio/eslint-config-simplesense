import{_ as a,c as i,a1 as e,o as n}from"./chunks/framework.C4wD7aVO.js";const c=JSON.parse('{"title":"Require error handling in callbacks (n/handle-callback-err)","description":"","frontmatter":{},"headers":[],"relativePath":"rules/n/handle-callback-err.md","filePath":"rules/n/handle-callback-err.md"}'),l={name:"rules/n/handle-callback-err.md"};function r(t,s,h,p,o,k){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="require-error-handling-in-callbacks-n-handle-callback-err" tabindex="-1">Require error handling in callbacks (<code>n/handle-callback-err</code>) <a class="header-anchor" href="#require-error-handling-in-callbacks-n-handle-callback-err" aria-label="Permalink to &quot;Require error handling in callbacks (\`n/handle-callback-err\`)&quot;">â€‹</a></h1><p>In Node.js, a common pattern for dealing with asynchronous behavior is called the callback pattern. This pattern expects an <code>Error</code> object or <code>null</code> as the first argument of the callback. Forgetting to handle these errors can lead to some really strange behavior in your application.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// forgot to handle error</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="ðŸ“–-rule-details" tabindex="-1">ðŸ“– Rule Details <a class="header-anchor" href="#ðŸ“–-rule-details" aria-label="Permalink to &quot;ðŸ“– Rule Details&quot;">â€‹</a></h2><p>This rule expects that when you&#39;re using the callback pattern in Node.js you&#39;ll handle the error.</p><h3 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">â€‹</a></h3><p>The rule takes a single string option: the name of the error parameter. The default is <code>&quot;err&quot;</code>.</p><p>Examples of <strong>incorrect</strong> code for this rule with the default <code>&quot;err&quot;</code> parameter name:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*eslint n/handle-callback-err: &quot;error&quot;*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Examples of <strong>correct</strong> code for this rule with the default <code>&quot;err&quot;</code> parameter name:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*eslint n/handle-callback-err: &quot;error&quot;*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err.stack);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Examples of <strong>correct</strong> code for this rule with a sample <code>&quot;error&quot;</code> parameter name:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*eslint n/handle-callback-err: [&quot;error&quot;, &quot;error&quot;]*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error.stack);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="regular-expression" tabindex="-1">Regular Expression <a class="header-anchor" href="#regular-expression" aria-label="Permalink to &quot;Regular Expression&quot;">â€‹</a></h4><p>Sometimes (especially in big projects) the name of the error variable is not consistent across the project, so you need a more flexible configuration to ensure that the rule reports all unhandled errors.</p><p>If the configured name of the error variable begins with a <code>^</code> it is considered to be a regexp pattern.</p><ul><li>If the option is <code>&quot;^(err|error|anySpecificError)$&quot;</code>, the rule reports unhandled errors where the parameter name can be <code>err</code>, <code>error</code> or <code>anySpecificError</code>.</li><li>If the option is <code>&quot;^.+Error$&quot;</code>, the rule reports unhandled errors where the parameter name ends with <code>Error</code> (for example, <code>connectionError</code> or <code>validationError</code> will match).</li><li>If the option is <code>&quot;^.*(e|E)rr&quot;</code>, the rule reports unhandled errors where the parameter name matches any string that contains <code>err</code> or <code>Err</code> (for example, <code>err</code>, <code>error</code>, <code>anyError</code>, <code>some_err</code> will match).</li></ul><h2 id="ðŸ”Ž-implementation" tabindex="-1">ðŸ”Ž Implementation <a class="header-anchor" href="#ðŸ”Ž-implementation" aria-label="Permalink to &quot;ðŸ”Ž Implementation&quot;">â€‹</a></h2><ul><li><a href="../../lib/rules/handle-callback-err.js">Rule source</a></li><li><a href="../../tests/lib/rules/handle-callback-err.js">Test source</a></li></ul>`,19)]))}const E=a(l,[["render",r]]);export{c as __pageData,E as default};
